const UserRegisterController = (app, db) => {
  // Helper function to run SQL queries using db.query
  const query = async (sql, params) => {
    try {
      const [results, fields] = await db.query(sql, params);
      return results;
    } catch (error) {
      throw error;
    }
  };

  // Endpoint for user registration
  app.post("/register/user", async (req, res) => {
    try {
      const {
        userFullName,
        userEmail,
        userUserName,
        userPassword,
        userType
      } = req.body;

      // Check if user username already exists
      const existingUser = await query('SELECT * FROM user_login WHERE userUserName = ?', [userUserName]);

      if (existingUser.length > 0) {
        return res.status(400).json({ success: false, message: "Username already exists" });
      }

      // Start a transaction
      const connection = await db;

      try {
        // Insert user details
        const [userDetailsResult] = await connection.query(
          'INSERT INTO user_details (userFullName, userEmail, userType) VALUES (?, ?, ?)',
          [userFullName, userEmail, userType]
        );

        // Retrieve the user ID generated by the database
        const userId = userDetailsResult.insertId;

        // Ensure that userId is a valid non-null value before inserting into user_login
        if (!userId || userId <= 0) {
          console.error('Invalid user ID during registration:', userId);
          throw new Error('Invalid user ID');
        }

        // Insert user login details
        await connection.query(
          'INSERT INTO user_login (user_id, userUserName, userPassword) VALUES (?, ?, ?)',
          [userId, userUserName, userPassword]
        );

        // Commit the transaction (Note: MySQL2 automatically commits if there is no error)

        // Registration successful
        console.log("User Registered Successfully");
        res.status(201).json({ success: true, message: "User Registration Successful!" });
      } catch (err) {
        // Rollback the transaction in case of an error
        await connection.rollback();
        throw err;
      } finally {
        // Release the connection (Note: MySQL2 automatically releases the connection back to the pool)
      }
    } catch (error) {
      console.error("Error during user registration:", error);
      res.status(500).json({ success: false, error: "Internal Server Error" });
    }
  });

  // Endpoint for user login
 // Endpoint for user login
 app.post("/login", async (req, res) => {
  const { userUserName, userPassword } = req.body;

  // Check if user exists and password matches
  const userLoginQuery = 'SELECT * FROM user_login WHERE userUserName = ? AND userPassword = ?';

  try {
    // Run the login query
    const userLoginResult = await query(userLoginQuery, [userUserName, userPassword]);

    // Check if the user exists and the password matches
    if (userLoginResult.length === 0) {
      res.status(401).json({ success: false, message: "Invalid credentials" });
      return;
    }

    // Successful login
    res.status(200).json({ success: true, message: "Login successful!" });
  } catch (err) {
    // Handle error
    console.error('Error during login:', err);
    res.status(500).json({ success: false, error: "Internal Server Error" });
  }
});
};

module.exports = UserRegisterController;
// GET Route for rendering the book addition form
router.get('/books/add', (req, res)=> {
  // Render the 'admin/books-add' view with empty arrays for errors, success messages, and data
  res.render('admin/books-add', {errs: [], success: [], data: []});
});

// POST Route for handling book addition form submission
router.post('/books/add', (req, res)=> {
  // Extract form data from the request
  var data = {
      book_id: req.body.book_id,
      title: req.body.title,
      author: req.body.author,
      cost: req.body.cost,
      quantity: req.body.quantity,
  };

  // Define validation rules for book creation
  var rules = validationRules.books.create;

  // Create an instance of asyncValidator with the defined rules
  var validator = new asyncValidator(rules);

  // Validate the form data using asyncValidator
  validator.validate(data, (errors, fields)=> {
      if(!errors){
          // If there are no validation errors, attempt to create a book using bookModel.createBook
          bookModel.createBook(data, (result)=> {
              if(!result){
                  // If book creation fails, send an "Invalid" response
                  res.send("Invalid");
              }
              else {
                  // If book creation is successful, render the form with a success message
                  console.log(result);
                  res.render('admin/books-add', {errs: [], success: [{message: "Book added successfully!"}], data: []});
              }
          });
      }
      else {
          // If there are validation errors, render the form with error messages and the submitted data
          console.log(fields);
          res.render('admin/books-add', {errs: errors, success: [], data});
      }
  });
});